ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
# Load and sanitize your dictionary
dictionary_path = r" "
dictionary = [word.upper() for word in open(dictionary_path) if word.strip().isalpha() and len(word.strip()) == 4]
dictionary.append("BLUE")

with open(dictionary_path) as f:
    dictionary = []
    for line in f:
        word = line.strip().upper()
        if len(word) == 4 and word.isalpha():
            dictionary.append(word)
print(f"Loaded {len(dictionary)} 4-letter alphabetic words")

def compute_index_of_coincidence(text):
    frequencies = [0] * 26
    for letter in text:
        frequencies[ALPHABET.index(letter)] += 1

    N = len(text)
    ioc_sum = 0
    for i in range(26):
        numerator = frequencies[i] * (frequencies[i] - 1)
        denominator = N * (N - 1)
        ioc_sum += numerator / denominator if denominator != 0 else 0
    return ioc_sum

def partition_by_key_length(ciphertext, key_length):
    partitions = [""] * key_length
    for idx in range(len(ciphertext)):
        partitions[idx % key_length] += ciphertext[idx]
    return partitions

def average_ioc_over_partitions(ciphertext, key_length):
    ioc_total = 0
    for substring in partition_by_key_length(ciphertext, key_length):
        ioc_total += compute_index_of_coincidence(substring)
    return ioc_total / key_length

def vigenere_decrypt(ciphertext, key):
    cipher_vals = [ALPHABET.index(char) for char in ciphertext]
    key_vals = [ALPHABET.index(char) for char in key]
    decrypted = ""
    for i in range(len(ciphertext)):
        shift = (cipher_vals[i] - key_vals[i % len(key)]) % 26
        decrypted += ALPHABET[shift]
    return decrypted

def dictionary_attack(ciphertext, dictionary):
    #The dictionary has already been sanitized hence we only check keys of length 4.
    candidate_keys = dictionary

    ioc_scores = []
    for key in candidate_keys:
        candidate_plaintext = vigenere_decrypt(ciphertext, key)
        ioc = compute_index_of_coincidence(candidate_plaintext)
        ioc_scores.append(ioc)

    best_ioc = min(ioc_scores, key=lambda x: abs(x - 0.065))
    best_key = candidate_keys[ioc_scores.index(best_ioc)]
    final_plaintext = vigenere_decrypt(ciphertext, best_key)

    return best_key, final_plaintext
# Replace this with your actual ciphertext
encrypted_text = " "

print(partition_by_key_length(encrypted_text, 4))
print(average_ioc_over_partitions(encrypted_text, 4))
print(dictionary_attack(encrypted_text, dictionary))
