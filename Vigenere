eng = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
def gibberishcalc(cipher):
    f = [0]*26
    for letter in cipher:
        f[eng.index(letter)] += 1
    sum = 0
    for i in range(26):
        a = f[i]*(f[i] -1)
        b = len(cipher)*(len(cipher) - 1)
        sum += a/b
    return sum
def partition(cipher,k):
    k_part = [""]*k
    for j in range(len(cipher)):
        k_part[j%k] += cipher[j]
    return k_part
print(partition("DCSTUZ...",4))
def gibpart(cipher, k):
    sum = 0
    for kth_part in partition(cipher,k):
        sum += gibberishcalc(kth_part)
    return sum/k
print(gibpart("DCSTUZ...", 4))

def vigenere_decrypt(cipher, key):
    cipher_val = [0]*len(cipher)
    for k in range(len(cipher)):
        cipher_val[k] += eng.index(cipher[k])
    key_val = [0]*len(key)
    for k in range(len(key)):
        key_val[k] += eng.index(key[k])
    for k in range(len(cipher)):
        cipher_val[k] = (cipher_val[k] - key_val[k%len(key)])%26
    plaintext = ""
    for k in range(len(cipher)):
        plaintext += eng[cipher_val[k]]
    return plaintext
def dictionary_attack(ciphertext, dictionary):
    key_length = 4
    pkey = []
    for word in dictionary:
        if len(word) == key_length:
            pkey.append(word)
    pplaintext_gib = []
    for word in pkey:
        posplaintext = vigenere_decrypt(ciphertext, word)
        pplaintext_gib.append(gibberishcalc(posplaintext))
    best = min(pplaintext_gib, key = lambda x:abs(x-.065))
    truekey = pkey[pplaintext_gib.index(best)]
    final = vigenere_decrypt(ciphertext, truekey)
    return (truekey, final)
ciphertext = "DCSTUZ..."
dictionary = open(r"C:\Users\mattw\Desktop\words_alpha.txt").read().upper().splitlines()

print(dictionary_attack(ciphertext, dictionary))
